<html><head>
<title>INFO 3300 - April 05</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v6.min.js"></script>
  <style>

  line.dashed {
    stroke: #aaa;
    stroke-width: 1px;
    stroke-dasharray: 2;
  }
  text.axis {
    text-anchor: end;
    font-variant: all-small-caps;
  }


  </style>
</head>

<body>
  <div class="container larger">
  <h3>Notes for April 05</h3>
  <p>Check out the documentation for <a href="https://github.com/d3/d3-force">d3.force</a> and the subsection for available <a href="https://github.com/d3/d3-force#forces">forces</a></p>
  <p>It turns out that d3 does not put every node at 0,0 directly if x and y are null. Instead, it staggers them using a <a href="https://observablehq.com/@mbostock/phyllotaxis">phyllotaxis arrangement</a>.</p>
  <p>Here is the d3.drag <a href="https://github.com/d3/d3-drag">documentation</a>.</p>

  <h5>HTML for today:</h5>

  <svg id="graph" height="800" width="800" style="background: #sff; margin-top:50px" >
  </svg>
  <div>
  <button id="play">Play</button>
  <button id="stop">Stop</button>
  <button id="tick">Tick</button>
  </div>



  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
      <!--- autofilled --->
    </code>
  </pre>


  <script id="notes1">
  
  // Layer for drawing
  const layer = d3.select("#graph").append("g");
  const width = d3.select("#graph").attr("width");
  const height = d3.select("#graph").attr("height");


  const requestData = async () => {

    // Load dataset of Karate club study 
    const karate = await d3.json("../datasets/soc-karate-dense.json");
    
    console.log(karate);

    // Get the nodes
    var nodes = karate.nodes; // Nodes can be just plain objects
                              // Loop through nodes to build edges
    nodes.forEach( node => {

      // Set initial positions with a bit of noise
      node.x = width/2.0 + d3.randomUniform(-200,200)();
      node.y = height/2.0 + d3.randomUniform(-200,200)();

    });
    
    //Go from a dense matric for edges to a sparse list
    //Go from an array of arrays to an array of objects

    var links = []; //sparse stuff
    let edgeMatrix = karate.edges;

    for ( let i=0; i < nodes.length; i++ ) {
      for ( let j=i; j < nodes.length; j++ ) {
        if ( edgeMatrix[ i ][ j ] === 1 ) {
          sourceID = nodes[ i ][ 'id' ]
          targetID = nodes[ j ][ 'id' ]
          link = { 'source': sourceID, 'target': targetID };
          links.push( link );
        }
      }
    }

    var sim = d3.forceSimulation()
                .nodes( nodes )
                .force( "links", d3.forceLink()
                                   .links( links )
                                   .id( d => d.id ) )
                .force( "repulse", d3.forceManyBody().strength( -150 ) )
                .force( "center", d3.forceCenter( width/2, height/2 ) )
                .on( "tick", render );

    console.log( nodes );
    console.log( links );
    // Do any pre-computing of ticks to smooth the animation?
    // You could do them here so the graph "starts out" in a nice fashion
    

    // Update the chart for a new tick of the simulation
    function render() {

      let lines = layer.selectAll( "line.link" ).data( links )
                       .join( enter => enter.append( "line" )
                                            .attr( "class", "link" )
                                            .attr( "stroke", "#333" ) )
                       .attr( "x1", d => d.source.x )
                       .attr( "x2", d => d.target.x )
                       .attr( "y1", d => d.source.y )
                       .attr( "y2", d => d.target.y )  

      let circles = layer.selectAll( "circle.node" ).data( nodes )
                         .join( 
                           enter => enter.append( "circle" )
                                              .attr( "class", "node" )
                                              .attr( "stroke", "#333" )
                                              .attr( "r", 8 )
                                              .attr( "cx", 0 )
                                              .attr( "cy", 0 )
                                              .attr( "fill", d => {
                                                if ( d.id === 1 ) { return "#0C0" }
                                                else if ( d.id === 34 ) { return "#C00" }
                                                else { return "steelblue"}
                                              } ) 
                                              .call( d3.drag().on("start",dragstart)
                                                              .on("drag",dragging)
                                                              .on("end",dragend) )
                              )
                         .attr( "transform", d => `translate( ${ d.x }, ${ d.y } )` );
                                                           
    };
    render();  // Call render once to make sure we draw circles even if simulation stops



    // Handle drag events and add a nice text label
    var label = layer.append( "text" ).attr( "id", "label" );
    function dragstart( event, d ) {
      // console.log( event, d );

      //first-time touch to handle multi-touch
      if ( !event.active ) {
        label.text( d.id )
        //reheat the sim
        sim.alphaTarget( 0.08 ).restart();
      }
      //change the sim rather than the svg
      d.fx = event.x;
      d.fy = event.y;

      label.attr( "x",  event.x+5 ).attr( "y", event.y );

    };

    function dragging( event, d  ) {
      d.fx = event.x;
      d.fy = event.y;

      label.attr( "x",  event.x+5 ).attr( "y", event.y );

    };

    function dragend( event, d  ) {
      // console.log( event, d );

      if ( !event.active ) {
        label.text( "" );
        //let sim end
        sim.alphaTarget( 0 );

      } 

      d.fx = null;
      d.fy = null;


    };



    
    // Handle the buttons provided in the HTML the same way as we did before
    d3.select("#play").on("click", () => {
      // Start animating the simulation
      sim.alpha(1).restart(); // clears the "alpha" value and starts fresh
    
    });
    d3.select("#stop").on("click", () => {
      // Pause the simulation animation
      sim.stop(); // pauses sim
    
    });
    d3.select("#tick").on("click", () => {
      // Move the simulation one "tick"
      sim.tick(); // moves one frame forward, but doesn't trigger tick event
      render(); // manually update circles
    });



  };

  requestData();




  </script>








  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  hljs.initHighlightingOnLoad();
  </script>


  </div>
</body>
</html>
