<html>
<head>
  <meta charset="UTF-8">
  <title>INFO 3300 - February 15</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>

</head>
<body>
  <div class="container larger">
    <h3>Prompt for Monday, February 15</h3>
    <p>
      You can access these files from the <a href="https://github.com/jeffrz/info3300-sp2021">course Github repository</a>. The repository will be updated with notes shortly after class. While I encourage you to make use of a local copy of the repository so you can take notes, the version at this site will always be up-to-date and accessible. Execute a <tt>git pull</tt> in your repository directory to download new files. Prompt files won't change after posting, so feel free to modify them as you like. Here is an <a href="http://rogerdudler.github.io/git-guide/">informal guide to git</a>.
    </p>
    <p>
      To develop efficiently, have a local web server running. Python has a simple, built-in server. Use <tt>python -m http.server</tt> for python 3; use <tt>python -m SimpleHTTPServer 8000</tt> for python 2 (execute python in cmd for version number).
    </p>  
    <p>
        How does Javascript differ among popular web browsers? <a href="https://caniuse.com/">Can I Use</a> breaks down browser support and <a href="https://en.wikipedia.org/wiki/Usage_share_of_web_browsers">Browser Usage</a> on Wikipedia shows current market share. Count on your TAs using recent Chrome browsers to evaluate your assignments, but remember that much of the world is not. Even browser usage stats can be misleading if you are intending for your site to be used by members of the Global South.
      </p>
    <p>
      Let's review <a href="http://www.json.org">Javascript Object Notation</a>.
    </p>
    
  
    <h5>HTML for today:</h5>

    <!-- Here's a standard HTML div element with an ID and a class -->
    <div id="d1" class="header" style="color: red;">
      Hello.
    </div>

    <!-- Here's an SVG canvas element. Note that in this file it looks like the <div> above. -->
    <svg height="200" width="200">
      <!-- Visual elements are represented by tags, which have attributes -->
      <rect x="50" y="30" r="30" width="40" height="50" id="rect1" style="fill: rgb(0, 200, 20); stroke-width: 5; stroke: black;"></rect>
      <rect x="100" y="30" r="30" width="40" height="25" id="rect2" style="fill: rgb(0, 20, 200); stroke-width: 5; stroke: black;"></rect>
    </svg>

    <!-- Here are two types of form inputs. -->
    <input id="entry" type="text" value="Hello?">
    <input id="slider" type="range" min="30" max="150" value="50">
    
    
    <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
    <h5>Code for today:</h5>
    <pre>
      <code id="display1" class="hljs javascript">
      </code>
      <code id="display2" class="hljs javascript">
      </code>
    </pre>


    <!--- Code for today's class --->
    <script id="notes1">
    
      // * Let's play with scoping of variables
      var  fruit = "orange";
      var veg = "carrot";
      const legume = "lentil";
      // {} creates a "block" of code which can scope the variables within with *let*
      if (fruit === "orange") {
        // *let* means the declaration lives only within this block for scope
        let fruit = "apple";
        let color = "red";
        // var is the only one that has global scoping override issues
        var veg = "leek";
        const legume = "bean";

        console.log("---IF STATEMENT");
        console.log("fruit", fruit);
        console.log("color", color);
        console.log("veg", veg);
        console.log("legume", legume);
        
      }

      console.log("---OUTSIDE STATEMENT");
      console.log("fruit", fruit);
      console.log("veg", veg);
      console.log("legume", legume);


      //script tags concat all script tags when running, so they are not separate for scoping things
      let test = "script tags, how do they work?";

      // Hoisting
      // x is undefined, but logs "undefined" instead of throwing an error
      // Once you declare a variable, JS moves all declarations to the top when running, so it knows x ~exists~ when it prints undefined instead of throwing an error. That is hoisiting (lifting the declarations up to the top)
      console.log(x);
      //Hoisting only works on "var" not on let
      var x = 5;
      console.log(x);

    
      // * Conditionals, functions and loops in c/java style and functional style.
      //   (to learn more about functions, check out http://ejohn.org/apps/learn/)
      
      // If statements:
      let y = 10;
      if (y === 10){
        console.log("equals 10");
      }
      else if (y === 11) {console.log("equals 11");}
      else {
        console.log("dne 10");
      }
      
            
      // Functions
      //Hoisting
      //console.log(favoriteColor() );
      function favoriteColor () {
        return "red";
      }
      console.log(favoriteColor);
      console.log(favoriteColor() );

      //Because JS sees function as objects, you can create "anonymous" functions. Because you are assigning them to a variable like you would an object
      //Anonymous functions do *not* get hoisted
      var favoriteNumber = function() {return 51;}
      console.log(favoriteNumber() );

      //this allows you to use functions as parameters, we are passing a function as a parameter to another function
      function display( func ) {
        console.log(func() );
      }
      display( favoriteNumber )
      display( favoriteColor )

      // This is a function that returns a function
      function addOne ( number ) {
        return function() { return number + 1; }
      }
      console.log( addOne() );
      console.log( addOne(5) );
      console.log( addOne(5)() );

      //SHORTCUTS-------------------------------------
      //let bestAnimal = function () {return "dog"}
      //bestAnimal = () => { return "dog" }
      bestAnimal = () => "dog"
      console.log( bestAnimal() );

      let addNums = ( num1, num2 ) => num1 + num2;
      console.log( addNums( 1, 2 ) );

      // Loops
      let list = ["red", "green", "blue", "yellow"];
      for (let i = 0; i < list.length; i++) {
        console.log(list[i]);
      }

      //equivalent loops
      console.log("INDEX--------------");
      //"in" gives you indices or keys
      for (let index in list) {
        console.log(list[index]);
      }

      console.log("OBJ--------------");
      //"of" gives you values
      for (let obj of list) {
        console.log(obj);
      }

      console.log("FOR EACH--------------");      
      list.forEach( (item) => {
        console.log(item);
      } );
      
      // * Let's talk JSON
      // JSON is used as a way to convey complex data over the web (e.g. getting data from an API elsewhere)
      // Key benefit over something like serialization is that it is standardized and very human-readable
      console.log("JSON--------------------");
      let obj = [{"name":"DDWA", "number":3300 },{"name": "Java", "number": 2110},{"name": "Python", "number": 1110}];
      
      let jsonObj = JSON.stringify(obj);
      console.log(jsonObj);
      console.log(typeof(jsonObj));
      console.log(JSON.parse(jsonObj));

      let badStr = '{"list": ["commas,", "single_quo\'tes", "double_quo"tes", "@sÃ§i|"], "nestedObject": {"undefined": undefined, "defined": 3.1415926535}, "Infinity": Infinity, "NaN": NaN, "bool": true}'
      //console.log(JSON.parse(badStr));
      
      
      
      var fib = '[1; 2; 3; 5; 7; 12]';
      //console.log(JSON.parse(fib));
    




      
      
    </script>


    <script id="notes2">
    
      // How do two script tags interact with each other?
      // console.log(test);

    </script>
    
    
    
    
    

    <!--- calls the highlight library to fill the <pre> tag with code --->
    <script>
    document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
    document.getElementById("display2").innerText = document.getElementById("notes2").innerText;
    hljs.initHighlightingOnLoad();
    </script>

  </div>
</body>
</html>
